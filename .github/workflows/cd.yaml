# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: CD

on:
  push:
    branches: ['main']

permissions:
  contents: read

jobs:
  precheck:
    runs-on: [self-hosted, Linux, X64, activity]
    steps:
      - name: Check kubectl permissions
        run: |
          echo "Checking Kubernetes permissions..."
          kubectl auth can-i delete deployments || (echo "No permission to delete deployments" && exit 1)
          kubectl auth can-i create deployments || (echo "No permission to create deployments" && exit 1)
      - name: Check Docker registry access
        run: |
          echo "Checking Docker registry access..."
          docker info || (echo "Docker not accessible" && exit 1)

  deploy:
    needs: precheck
    runs-on: [self-hosted, Linux, X64, activity]

    steps:
      - uses: actions/checkout@v4
      - name: Print working directory
        run: |
          pwd
          ls -la
          git status

      - name: Create .env file from GitHub Secrets
        run: |
          
          SERVICE_NAME: ${{ vars.SERVICE_NAME }}

          # Database
          echo "DB_SERVER_DEV=${{ secrets.DB_SERVER_DEV }}" >> .env
          echo "DB_DATABASE_DEV=${{ secrets.DB_DATABASE_DEV }}" >> .env
          echo "DB_DATABASE_PORT=${{ secrets.DB_DATABASE_PORT }}" >> .env
          echo "DB_USERNAME_DEV=${{ secrets.DB_USERNAME_DEV }}" >> .env
          echo "DB_PASSWORD_DEV=${{ secrets.DB_PASSWORD_DEV }}" >> .env
          echo "DB_DRIVER_DEV=${{ secrets.DB_DRIVER_DEV }}" >> .env

          # Origins
          echo "WEB_FE_ORIGIN=${{ secrets.WEB_FE_ORIGIN }}" >> .env
          echo "PATIENT_BE_ORIGIN=${{ secrets.PATIENT_BE_ORIGIN }}" >> .env
          echo "USER_BE_ORIGIN=${{ secrets.USER_BE_ORIGIN }}" >> .env

          # RabbitMQ
          echo "RABBITMQ_HOST=${{ secrets.RABBITMQ_HOST_PROD }}" >> .env
          echo "RABBITMQ_PORT=${{ secrets.RABBITMQ_PORT }}" >> .env
          echo "RABBITMQ_USER=${{ secrets.RABBITMQ_USER }}" >> .env
          echo "RABBITMQ_PASS=${{ secrets.RABBITMQ_PASS }}" >> .env
          echo "RABBITMQ_VIRTUAL_HOST=${{ secrets.RABBITMQ_VIRTUAL_HOST }}" >> .env

      - name: Apply Kubernetes ConfigMap
        run: |
          echo "Applying ConfigMap..."
          kubectl apply -f './k8s/configmap.yaml'
          kubectl apply -f './k8s/secret.yaml'

      - name: Delete old deployment
        run: |
          echo "Deleting old deployment..."
          kubectl delete deployment.apps/activity-service-dev service/activity-service-dev

      - name: Delete old docker images
        run: |
          docker rmi activity_service_dev
          docker rmi localhost:5000/activity_service_dev

      - name: Build Docker image
        run: |
          echo "Building Docker image..."
          docker build --no-cache -f Dockerfile.dev -t activity_service_dev .

      - name: Tag Docker image
        run: |
          echo "Tagging Docker image..."
          docker tag activity_service_dev:latest localhost:5000/activity_service_dev:latest

      - name: Push Docker image to local registry
        run: |
          echo "Pushing Docker image to localhost:5000...."
          docker push localhost:5000/activity_service_dev:latest

      - name: Deploying to Kubernetes
        run: |
          echo "Deploying..."
          kubectl apply -f './k8s/deployment-dev.yaml'
          kubectl apply -f './k8s/filebeat-daemonset.yaml'
